package com.example.screeningexcerciseepifi.auth.domainimport com.example.screeningexcerciseepifi.auth.models.ValidateResultimport com.example.screeningexcerciseepifi.auth.models.DateOfBirthimport java.time.LocalDateclass DOBValidatorUseCase(private val currentDate: LocalDate? = LocalDate.now()) {    private val monthDayMap = mutableMapOf<Int, Int>(            1 to 31,            2 to 28,            3 to 31,            4 to 30,            5 to 31,            6 to 30,            7 to 31,            8 to 31,            9 to 30,            10 to 31,            11 to 30,            12 to 31    )    operator fun invoke(dateOfBirth: DateOfBirth): Result<ValidateResult> {        if (dateOfBirth.day.isEmpty() || dateOfBirth.month.isEmpty() || dateOfBirth.year.isEmpty()) {            return Result.Error(                    error = "Field should not be empty"            )        }        val day = dateOfBirth.day.toInt()        val month = dateOfBirth.month.toInt()        val year = dateOfBirth.year.toInt()        val isLeapYear = year % 4 == 0        val inputDate = LocalDate.of(year, month, day)        if (isLeapYear) {            monthDayMap[2] = 29        }        when {            (month < 1 || month > 12) -> {                return Result.Error("Month must be between 1 to 12")            }            (day < 1 || day > monthDayMap[month]!!) -> {                return Result.Error("Day must be between 1 to ${monthDayMap[month]}")            }            (inputDate.isAfter(currentDate)) -> {                return Result.Error("Date must be a past date")            }            (year < 1900) -> {                return Result.Error("year must be a less than 1900")            }            else -> {                return Result.Success(                        ValidateResult(                                isSuccessful = true                        )                )            }        }    }}