package com.example.screeningexcerciseepifi.auth.presenterimport androidx.lifecycle.LiveDataimport androidx.lifecycle.MediatorLiveDataimport androidx.lifecycle.MutableLiveDataimport androidx.lifecycle.ViewModelimport androidx.lifecycle.viewModelScopeimport com.example.screeningexcerciseepifi.auth.models.DateOfBirthimport com.example.screeningexcerciseepifi.auth.domain.DOBValidatorUseCaseimport com.example.screeningexcerciseepifi.auth.domain.PanValidatorUseCaseimport com.example.screeningexcerciseepifi.auth.domain.Resultimport com.example.screeningexcerciseepifi.auth.models.ValidateResultimport kotlinx.coroutines.Dispatchersimport kotlinx.coroutines.launchimport kotlinx.coroutines.withContextclass AuthViewModel(        private val validatePAN:PanValidatorUseCase = PanValidatorUseCase(),        private val validateDOB:DOBValidatorUseCase = DOBValidatorUseCase()):ViewModel() {   private val _panValidateLiveData = MutableLiveData<ViewState<ValidateResult>>()   val panValidate: LiveData<ViewState<ValidateResult>> get() = _panValidateLiveData   private val _dateValidateLiveData = MutableLiveData<ViewState<ValidateResult>>()   val dateValidate: LiveData<ViewState<ValidateResult>> get() = _dateValidateLiveData   val verifyAllDetailsLiveData: MediatorLiveData<Boolean> = MediatorLiveData<Boolean>()   init {      verifyAllDetailsLiveData.addSource(panValidate) { _ ->         verifyAllDetailsLiveData.setValue(areAllDetailsValid())      }      verifyAllDetailsLiveData.addSource(dateValidate) { _ ->         verifyAllDetailsLiveData.setValue(areAllDetailsValid())      }   }   private fun areAllDetailsValid()= (_panValidateLiveData.value is ViewState.Success && _dateValidateLiveData.value is ViewState.Success)   fun validateDate(dateOfBirth: DateOfBirth){      viewModelScope.launch(Dispatchers.IO) {         when(val result:Result<ValidateResult> = validateDOB.invoke(dateOfBirth)){            is Result.Success -> {               withContext(Dispatchers.Main) {                  val validateResult = result.data                  _dateValidateLiveData.value = ViewState.Success(validateResult)               }            }            is Result.Error -> {               withContext(Dispatchers.Main){                  val validateResult = result.error                  _dateValidateLiveData.value = ViewState.Error(validateResult)               }            }         }      }   }   fun validatePAN(string: String){      viewModelScope.launch(Dispatchers.IO) {         when(val result: Result<ValidateResult> = validatePAN.invoke(string)){               is Result.Success -> {                  withContext(Dispatchers.Main){                     val validateResult = result.data                     _panValidateLiveData.value = ViewState.Success(validateResult)                  }               }            is Result.Error -> {               withContext(Dispatchers.Main){                  val validateResult = result.error                  _panValidateLiveData.value = ViewState.Error(validateResult)               }            }         }      }   }}